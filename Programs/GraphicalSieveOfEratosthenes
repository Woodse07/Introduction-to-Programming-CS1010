The Sieve of Eratosthenes is ancient algorithm for finding all the prime numbers from 2 through to any larger natural number N. It does so by iteratively marking, as a composite number (not a prime number),<br/> any number whose value is a higher multiple of each prime number, starting with the higher multiples of 2 (the first prime number).<br/> The Wikipedia page: Sieve of Eratosthenes has a description of the algorithm and also an animation (a .gif file)<br/> showing a graphical simulation of the execution (stepwise enactment) of the algorithm from beginning through to end (where N has the value 120).<br/>
Write a Java program to graphically simulate the execution of the Sieve of Eratosthenes algorithm for any natural number N entered by the user; the graphical simulation should be similar to the animation<br/> on the Wikipedia page: Sieve of Eratosthenes. The program must allow a user to enter a value for N and then display the graphical simulation<br/> of the algorithm executing in a window by performing the following steps: <br/>
Displaying the numbers from 2 through to N, within squares of equal size and colour, arranged (approximately) as a matrix of squares within the window.<br/>
Iteratively displaying the composite numbers (higher multiples of some prime number), as they are marked during the execution of the algorithm, by changing the colour of the square containing the composite number. Squares containing composite numbers, which are higher multiples of the same prime number p2, should change to the same colour; assuming that the square has not already changed colour; because the square contained a composite number with a prime factor p1 of lesser value to the currently identified prime p2 (i.e. p1 < p2) during the algorithm execution, e.g., the square containing the composite number 6 will be changed to the colour associated with the prime number 2 not to the prime number 3.<br/>
Displaying the prime numbers, as they are found during the execution of the algorithm, within the window also arranged (approximately) as a matrix of prime numbers positioned adjacent to the matrix of colour squares. <br/>

Your program should build on (extend) your solution to Lab 1: Sieve of Eratosthenes and should implement and use (at least) the following (static) methods:<br/>
displayNumber which takes a number n (the natural number which is to be displayed in a square), a colour c (the colour of the square which will contain the number n) and the number N (which was enter by the user as the largest number in the sieve); the method should display the number n centred within a single square of colour c in a window; the square containing the number n should be positioned appropriately within the window based on the value of N, i.e., repeatedly invoking this method, where the value of n runs from 2 thought to N, should draw the sequence of numbers 2 through to N within squares of equal size, arranged (approximately) as a matrix squares within the window.<br/>
displayNumbers2ToN which takes the number N (which was enter by the user as the largest number in the sieve) and which displays the natural numbers from 2 through to N, within squares of equal size and colour, arranged (approximately) as a matrix of squares within the window.<br/>
displayComposite which takes a number m (a composite number which is to be displayed) and a number prime_count (counting the number of prime numbers which have been found so far by the sieve algorithm during execution) and additionally the number N (which was enter by the user as the largest number in the sieve); the method should change the colour of the square containing the composite number m; the colour which square changes to is related to (indexed by) the number prime_count (i.e., is based on the mostly recently found prime number during the execution of the sieve); following colour change of the square containing the composite number the method should pause the graphical simulation's execution for 50 milliseconds.<br/>
displayPrime which takes a number p (a prime number which is to be displayed) and a number prime_count (counting the number of prime numbers which have been found so far by the sieve algorithm during execution); the method should display the prime number p in the window in a position related to (indexed by) the number prime_count (so that as prime numbers are found by the sieve algorithm they are display as an (approximate) matrix of prime numbers adjacent to the position of the matrix of colour squares containing the numbers 2 through to N); following the display of the prime number the method should pause the graphical simulation's execution for 50 milliseconds.<br/>
main which must allow a user to enter a value for N (largest natural number in the sieve) where N >= 2 and then to display a graphical simulation of the execution of the Sieve of Eratosthenes algorithm for the entered value of N within a window to the user.<br/>
Your program can make use of the StdDraw.java module (a Java class viewed as a library of related methods) which provides methods to display geometric shapes, text, etc., within a window. The Java program StdDrawDemo.java demonstrates the use and behaviour of a number of methods from the StdDraw.java module. Both of the files StdDraw.java and StdDrawDemo.java are included below this lab assignment in the this Blackboard folder.<br/>
